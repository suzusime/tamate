@require: pervasives
@require: option
@require: annot

% B5用紙
let page-width = 182mm
let page-height = 257mm
% 文字サイズ13Q
let font-size-normal = 3.25mm
% 行送り22H(=13+9)
let line-space-normal = 2.25mm
let leading-normal = font-size-normal +' line-space-normal
% 版面の幅
let hanzura-width = font-size-normal *' 44.
% 版面の左マージン
let left-margin = (page-width -' hanzura-width) *' 0.5
% 版面の上マージン
let top-margin = 18mm
% 1ページあたりの行数
let line-number = 40
% 版面の高さ
let hanzura-height = leading-normal *' (float line-number) -' line-space-normal

% 大きさの基準を和文にする
let font-ratio-latin = 1.0 /. 0.88
let font-ratio-cjk = 1.0

% フォント設定
let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
let font-cjk-mincho   = (`ipaexm`    , font-ratio-cjk  , 0.)
let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)
let set-cjk-font font ctx =
  ctx |> set-font Kana font
      |> set-font HanIdeographic font

% 見出しの設定
%% 節
%% 3行取り = 57H = 20H + 24Q + 13H
let make-section-title ctx =
  ctx |> set-font-size 6mm
      |> set-font Latin font-latin-sans
      |> set-cjk-font font-cjk-gothic

let section-top-margin = 2.25mm+'5mm
let section-bottom-margin = 2.25mm+'3.25mm

% 標準数式コマンド
let-inline ctx \math m =
  script-guard Latin (embed-math ctx m)

% 全体の基本となる文脈の設定
let get-standard-context =
  get-initial-context hanzura-width (command \math)
    |> set-paragraph-margin 0mm line-space-normal
    |> set-dominant-wide-script Kana
    |> set-language Kana Japanese
    |> set-language HanIdeographic Japanese
    |> set-dominant-narrow-script Latin
    |> set-language Latin English
    |> set-font Kana           font-cjk-mincho
    |> set-font HanIdeographic font-cjk-mincho
    |> set-font Latin          font-latin-roman
    |> set-math-font `lmodern`
    |> set-font-size font-size-normal
    |> set-leading leading-normal
    |> set-hyphen-penalty 100

% 字下げの設定
let-mutable needs-indentation-ref <- true
let quad-indent ctx =
  inline-skip (get-font-size ctx)

% 標準段落
let-block ctx +p inner =
  let needs-indentation =
    if !needs-indentation-ref then true else
      let () = needs-indentation-ref <- true in
        false
  in
  let ib-inner = read-inline ctx inner in
  let br-parag =
    if needs-indentation then
      (quad-indent ctx) ++ ib-inner ++ inline-fil
    else
      ib-inner ++ inline-fil
  in
    form-paragraph ctx br-parag

% 字下げなし段落
let-block ctx +pn inner =
  let () = needs-indentation-ref <- true in
  let ib-inner = read-inline ctx inner in
    form-paragraph ctx (ib-inner ++ inline-fil)

% 目次関連
let-mutable toc-acc-ref <- []
let-mutable outline-ref <- []
type toc-element =
  | TOCElementSection    of string * inline-text
  | TOCElementSubsection of string * inline-text
let generate-fresh-label =
  let-mutable count <- 0 in
    (fun () -> (
      let () = count <- !count + 1 in
        `generated:` ^ (arabic (!count))
    ))

% 節の設定
let-mutable num-section <- 0
let no-pads = (0pt, 0pt, 0pt, 0pt)

let section-heading ctx ib-heading =
  let wid = get-text-width ctx in
  let color = get-text-color ctx in
    line-break true false (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
      ib-heading


let section-scheme ctx label title outline-title-opt inner =
  let ctx-title = make-section-title ctx in
  let () = num-section <- !num-section + 1 in
  % let () = num-subsection <- 0 in
  let () = needs-indentation-ref <- true in % 節の最初の段落も字下げする
  let s-num = arabic (!num-section) in
  let () = register-cross-reference (label ^ `:num`) s-num in
  let () = toc-acc-ref <- (TOCElementSection(label, title)) :: !toc-acc-ref in
  let ib-num =
    read-inline ctx-title (embed-string (s-num ^ `.`))
      ++ hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number))
  in
  let ib-title = read-inline ctx-title title in
  let outline-title = Option.from (extract-string ib-title) outline-title-opt in
  let () = outline-ref <- (0, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
  let bb-title =
    block-frame-breakable ctx no-pads (Annot.register-location-frame label) (fun ctx -> (
      (section-heading ctx
        (ib-num ++ (inline-skip 3mm) ++ ib-title ++ (inline-fil)))))
  in
  let bb-inner = read-block ctx inner in
    bb-title +++ bb-inner

let-block ctx +section ?:labelopt ?:outline-title-opt title inner =
  let label =
    match labelopt with
    | None        -> generate-fresh-label ()
    | Some(label) -> label
  in
    section-scheme ctx label title outline-title-opt inner


% 全体の設定（エントリポイント）
let document bt =
  let ctx = get-standard-context in
  let bb = read-block ctx bt in
  let paper-size = (UserDefinedPaper(page-width, page-height)) in
  page-break paper-size
    (fun _ -> (|
      text-origin = (left-margin, top-margin);
      text-height = hanzura-height;
    |))
    (fun _ -> (|
      header-origin = (0mm, 0mm);
      header-content = block-nil;
      footer-origin = (0mm, 0mm);
      footer-content = block-nil;
    |))
    bb
